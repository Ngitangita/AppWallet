openapi: 3.0.3
info:
  title: Wallet API
  version: 1.0.0
  description: Wallet_TD1_STD22047_STD22036
servers:
  - url: https://library.com
tags:
  - name: Account
  - name: Devise
  - name: Transaction
paths:
  /account:
    post:
      tags:
        - Account
      summary: Create accounts
      description: This can only be done by the logged-in accounts.
      operationId: createAccount
      requestBody:
        description: Created accounts object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/xml:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    get:
      tags:
        - Account
      summary: Get all accounts
      description: Retrieve a list of all accounts in the wallet application, optionally filtered by accountName.
      operationId: getAccountId
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Account
      summary: Update accounts
      description: This can only be done by the logged-in accounts.
      operationId: updateAccount
      parameters:
        - name: accountName
          in: path
          description: Name that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent account in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/xml:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Account
      summary: Delete accounts
      description: Delete accounts by ID
      operationId: deleteAccount
      parameters:
        - name: accountName
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'

  /devise:
    post:
      tags:
        - Devise
      summary: Create devises
      description: This can only be done by the logged-in devise.
      operationId: createDevise
      requestBody:
        description: Created devise object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Devise'
          application/xml:
            schema:
              $ref: '#/components/schemas/Devise'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Devise'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    get:
      tags:
        - Devise
      summary: Get all devises
      description: Retrieve a list of all devises in the wallet application, optionally filtered by devise.
      operationId: getDeviseId
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Devise
      summary: Update devises
      description: This can only be done by the logged-in devise.
      operationId: updateDevise
      parameters:
        - name: devise
          in: path
          description: Name that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent devise in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Devise'
          application/xml:
            schema:
              $ref: '#/components/schemas/Devise'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Devise'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Devise
      summary: Delete devises
      description: Delete devise by ID
      operationId: deleteDevise
      parameters:
        - name: devise
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'

  /transaction:
    post:
      tags:
        - Transaction
      summary: Create transaction
      description: This can only be done by the logged-in transaction.
      operationId: createTransaction
      requestBody:
        description: Created transaction object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    get:
      tags:
        - Transaction
      summary: Get all transaction
      description: Retrieve a list of all transaction in the wallet application, optionally filtered by transaction.
      operationId: getTransactionID
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Transaction
      summary: Update transaction
      description: This can only be done by the logged-in transaction.
      operationId: updateTransaction
      parameters:
        - name: transaction
          in: path
          description: Name that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent transaction in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Transaction
      summary: Delete transaction
      description: Delete transaction by ID
      operationId: deleteTransaction
      parameters:
        - name: transaction
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '403':
          $ref: '#/components/responses/Response403'
        '500':
          $ref: '#/components/responses/Response500'

components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
        sold:
          type: number
        accountType:
          type: string
        openDate:
          type: string
          format: "date-time"

    Devise:
      type: object
      properties:
        id:
          type: integer
        rateChange:
          type: number
        deviseSymbol:
          type: string

    Transaction:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        type:
          type: string
        transactionDate:
          type: string
          format: "date-time"

    Status:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the response
        message:
          type: string
          description: Message associated with the status code

    Body:
      type: object
      properties:
        property:
          type: string
          description: Value of the property in the response body

  responses:
    Response200:
      description: Successful operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Status'
              - $ref: '#/components/schemas/Body'

    Response400:
      description: Bad Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Status'
              - $ref: '#/components/schemas/Body'

    Response403:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Status'
              - $ref: '#/components/schemas/Body'

    Response500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Status'
              - $ref: '#/components/schemas/Body'
